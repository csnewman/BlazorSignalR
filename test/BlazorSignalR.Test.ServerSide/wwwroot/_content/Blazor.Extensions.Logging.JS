!function(e){var o={};function n(r){if(o[r])return o[r].exports;var t=o[r]={i:r,l:!1,exports:{}};return e[r].call(t.exports,t,t.exports,n),t.l=!0,t.exports}n.m=e,n.c=o,n.d=function(e,o,r){n.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,o){if(1&o&&(e=n(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var t in e)n.d(r,t,function(o){return e[o]}.bind(null,t));return r},n.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(o,"a",o),o},n.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},n.p="",n(n.s=0)}([function(e,o,n){"use strict";Object.defineProperty(o,"__esModule",{value:!0});const r=n(1);var t;!function(e){const o="BlazorExtensions",n={Logging:{BrowserConsoleLogger:new r.BrowserConsoleLogger}};e.initialize=function(){"undefined"==typeof window||window[o]?window[o]=Object.assign({},window[o],n):window[o]=Object.assign({},n)}}(t||(t={})),t.initialize()},function(e,o,n){"use strict";Object.defineProperty(o,"__esModule",{value:!0});const r=n(2);o.BrowserConsoleLogger=class{Log(e){const o=JSON.parse(e);let n=console.log;if(o.type===r.LogObjectType.Table)n=console.table;else switch(o.logLevel){case r.LogLevel.Trace:n=console.trace;break;case r.LogLevel.Debug:n=console.debug;break;case r.LogLevel.Warning:n=console.warn;break;case r.LogLevel.Error:case r.LogLevel.Critical:n=console.error}n(o.payload),o.exception&&n("Exception: ",o.exception)}}},function(e,o,n){"use strict";Object.defineProperty(o,"__esModule",{value:!0}),function(e){e[e.Trace=0]="Trace",e[e.Debug=1]="Debug",e[e.Information=2]="Information",e[e.Warning=3]="Warning",e[e.Error=4]="Error",e[e.Critical=5]="Critical",e[e.None=6]="None"}(o.LogLevel||(o.LogLevel={})),function(e){e[e.String=0]="String",e[e.Object=1]="Object",e[e.Table=2]="Table"}(o.LogObjectType||(o.LogObjectType={}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,