!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const o=t(1),r=t(2),i=t(3);var c;!function(e){const n="BlazorSignalR",t={ServerSentEventsTransport:new o.ServerSentEventsTransport,WebSocketsTransport:new r.WebSocketsTransport,BlazorHttpMessageHandler:new i.BlazorHttpMessageHandler};e.initialize=function(){"undefined"==typeof window||window[n]?window[n]=Object.assign({},window[n],t):window[n]=Object.assign({},t)}}(c||(c={})),c.initialize()},function(e,n,t){"use strict";var o=this&&this.__awaiter||function(e,n,t,o){return new(t||(t=Promise))(function(r,i){function c(e){try{d(o.next(e))}catch(e){i(e)}}function s(e){try{d(o.throw(e))}catch(e){i(e)}}function d(e){e.done?r(e.value):new t(function(n){n(e.value)}).then(c,s)}d((o=o.apply(e,n||[])).next())})};Object.defineProperty(n,"__esModule",{value:!0});n.ServerSentEventsTransport=class{constructor(){this.connections=new Map,this.IsSupported=(()=>"undefined"!=typeof EventSource)}CreateConnection(e,n){return o(this,void 0,void 0,function*(){const t=yield n.invokeMethodAsync("get_InternalSSEId"),r=yield n.invokeMethodAsync("get_SSEAccessToken");r&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(r)}`);const i=new EventSource(e,{withCredentials:!0});this.connections.set(t,i),i.onmessage=(e=>o(this,void 0,void 0,function*(){yield n.invokeMethodAsync("HandleSSEMessage",btoa(e.data))})),i.onerror=(e=>o(this,void 0,void 0,function*(){const t=new Error(e.data||"Error occurred");yield n.invokeMethodAsync("HandleSSEError",t.message)})),i.onopen=(()=>o(this,void 0,void 0,function*(){yield n.invokeMethodAsync("HandleSSEOpened")}))})}CloseConnection(e){return o(this,void 0,void 0,function*(){const n=yield e.invokeMethodAsync("get_InternalSSEId"),t=this.connections.get(n);t&&(this.connections.delete(n),t.close())})}}},function(e,n,t){"use strict";var o=this&&this.__awaiter||function(e,n,t,o){return new(t||(t=Promise))(function(r,i){function c(e){try{d(o.next(e))}catch(e){i(e)}}function s(e){try{d(o.throw(e))}catch(e){i(e)}}function d(e){e.done?r(e.value):new t(function(n){n(e.value)}).then(c,s)}d((o=o.apply(e,n||[])).next())})};Object.defineProperty(n,"__esModule",{value:!0});class r{constructor(){this.IsSupported=(()=>"undefined"!=typeof WebSocket)}CreateConnection(e,n,t){return o(this,void 0,void 0,function*(){const i=yield t.invokeMethodAsync("get_InternalWebSocketId"),c=yield t.invokeMethodAsync("get_WebSocketAccessToken");c&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(c)}`),e=e.replace(/^http/,"ws");const s=new WebSocket(e);r.connections.set(i,s),n&&(s.binaryType="arraybuffer"),s.onopen=(e=>o(this,void 0,void 0,function*(){yield t.invokeMethodAsync("HandleWebSocketOpened")})),s.onerror=(e=>o(this,void 0,void 0,function*(){const n=e instanceof ErrorEvent?e.error:new Error("Error occured");yield t.invokeMethodAsync("HandleWebSocketError",n.message)})),s.onmessage=(e=>o(this,void 0,void 0,function*(){yield t.invokeMethodAsync("HandleWebSocketMessage",btoa(e.data))})),s.onclose=(e=>o(this,void 0,void 0,function*(){yield t.invokeMethodAsync("HandleWebSocketClosed")}))})}Send(e,n){return o(this,void 0,void 0,function*(){const t=yield n.invokeMethodAsync("get_InternalWebSocketId"),o=r.connections.get(t);if(!o)throw new Error("Unknown connection");o.send(atob(e))})}CloseConnection(e){return o(this,void 0,void 0,function*(){const n=yield e.invokeMethodAsync("get_InternalWebSocketId"),t=r.connections.get(n);t&&(r.connections.delete(n),t.onclose=(()=>{}),t.onmessage=(()=>{}),t.onerror=(()=>{}),t.close())})}}r.connections=new Map,n.WebSocketsTransport=r},function(e,n,t){"use strict";var o=this&&this.__awaiter||function(e,n,t,o){return new(t||(t=Promise))(function(r,i){function c(e){try{d(o.next(e))}catch(e){i(e)}}function s(e){try{d(o.throw(e))}catch(e){i(e)}}function d(e){e.done?r(e.value):new t(function(n){n(e.value)}).then(c,s)}d((o=o.apply(e,n||[])).next())})};Object.defineProperty(n,"__esModule",{value:!0});n.BlazorHttpMessageHandler=class{sendAsync(e,n){return o(this,void 0,void 0,function*(){let t,o;const r=JSON.parse(n),i=Object.assign(r.requestInit,r.requestInitOverrides);e&&(i.body=new Uint8Array(e));try{o=yield(t=yield fetch(r.requestUri,i)).arrayBuffer()}catch(e){return function(e){return{statusCode:null,statusText:null,headers:[],bodyData:null,errorText:e}}(e.toString())}return function(e,n){const t=new Uint8Array(n),o={statusCode:e.status,statusText:e.statusText,headers:[],bodyData:Array.from(t),errorText:null};return e.headers.forEach((e,n)=>{o.headers.push([n,e])}),o}(t,o)})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,