<Project>
  <!-- Set common properties regarding assembly information and nuget packages -->
  <PropertyGroup>
    <Authors>csnewman</Authors>
    <Product>Blazor SignalR</Product>
    <Copyright>(c) csnewman. All rights reserved.</Copyright>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/csnewman/BlazorSignalR</PackageProjectUrl>
    <PackageTags>Microsoft ASP.NET Core Blazor SignalR</PackageTags>
    <PackageReleaseNotes></PackageReleaseNotes>
    <RepositoryUrl>https://github.com/csnewman/BlazorSignalR</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <IncludeSymbols>true</IncludeSymbols>
  </PropertyGroup>

  <!-- Common compile parameters -->
  <PropertyGroup>
    <LangVersion>latest</LangVersion>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <!-- We use full (Windows PDBs) until cross platform support for source link will get better -->
    <DebugType>full</DebugType>
     <NoWarn>NU5105</NoWarn>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <TestProjectTargetFramework>netstandard2.0</TestProjectTargetFramework>
  </PropertyGroup>

  <!-- Versioning properties -->
  <PropertyGroup>
    <VersionPrefix Condition=" '$(VersionPrefix)'=='' ">0.1.0</VersionPrefix>
    <VersionSuffix Condition=" '$(VersionSuffix)'=='' ">dev</VersionSuffix>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(OfficialBuild)' != 'true'">
      <!-- On non-official builds we don't burn in a git sha. In large part because it
           hurts our determinism efforts as binaries which should be the same between
           builds will not (due to developers building against different HEAD
           values -->
      <PropertyGroup>
        <GitHeadSha>&lt;developer build&gt;</GitHeadSha>
      </PropertyGroup>
    </When>
    <When Condition="'$(BUILD_SOURCEVERSION)' != ''">
      <PropertyGroup>
        <GitHeadSha>$(BUILD_SOURCEVERSION)</GitHeadSha>
      </PropertyGroup>
    </When>
    <When Condition="'$(BUILD_SOURCEVERSION)' == '' AND '$(GIT_COMMIT)' != ''">
      <PropertyGroup>
        <GitHeadSha>$(GIT_COMMIT)</GitHeadSha>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <GitHeadSha>Not found</GitHeadSha>
        <DotGitDir>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory).git'))</DotGitDir>
        <HeadFileContent Condition="Exists('$(DotGitDir)/HEAD')">$([System.IO.File]::ReadAllText('$(DotGitDir)/HEAD').Trim())</HeadFileContent>
        <RefPath Condition="$(HeadFileContent.StartsWith('ref: '))">$(DotGitDir)/$(HeadFileContent.Substring(5))</RefPath>
        <GitHeadSha Condition="'$(RefPath)' != '' AND Exists('$(RefPath)')">$([System.IO.File]::ReadAllText('$(RefPath)').Trim())</GitHeadSha>
        <GitHeadSha Condition="'$(HeadFileContent)' != '' AND '$(RefPath)' == ''">$(HeadFileContent)</GitHeadSha>
      </PropertyGroup>
    </Otherwise>
  </Choose>
</Project>
